on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  checks: write

jobs:
  build:
    name: Build and Test
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        vscode-version: ['stable', 'insiders']
        vscode-platform: ['desktop']
    runs-on: ${{ matrix.os }}
    env:
      VSCODE_TEST_VERSION: ${{matrix.vscode-version}}
      VSCODE_TEST_PLATFORM: ${{matrix.vscode-platform}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Node.js 
        if: runner.os != 'Linux'
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install Node.js via NVM (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          export NVM_DIR="$HOME/.nvm"
          source "$NVM_DIR/nvm.sh"
          echo $NVM_DIR >> $GITHUB_PATH
          echo "NVM_DIR=$NVM_DIR" >> $GITHUB_ENV
          nvm install $(cat test-workspaces/nvm/.nvmrc)
          nvm install lts/*

      - name: Update NPM (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo npm uninstall -g yarn pnpm
          sudo npm install -g npm@latest
          sudo npm install -g corepack@latest
      - name: Update NPM (Win/MacOS)
        if: runner.os != 'Linux'
        run: |
          npm uninstall -g yarn pnpm
          npm install -g npm@latest
          npm install -g corepack@latest

      - name: Install dependencies
        run: |
          node --version
          npm --version
          npm install

      - name: Compile
        run: npm run compile:test

      - name: Print Test Config
        run: node ./.vscode-test.mjs
        env:
          VSCODE_CONFIG_LOG: true

      - name: Run Tests (Linux)
        run: xvfb-run -a npm test
        if: runner.os == 'Linux'
      - name: Run Tests (Win/MacOS)
        run: npm test
        if: runner.os != 'Linux'

      - name: Pack for VSIX Tests
        run: npm run package:test
        env:
          TEST_TEMP: ${{ runner.temp }}      

      - name: Recompile-tests
        run: npm run compile:test

      - name: Run VSIX Tests (Linux)
        run: xvfb-run -a npm run test:vsix
        env:
          TEST_TEMP: ${{ runner.temp }}
        if: runner.os == 'Linux'
      - name: Run VSIX Tests (Win/MacOS)
        run: npm run test:vsix
        env:
          TEST_TEMP: ${{ runner.temp }}        
        if: runner.os != 'Linux'

      - name: Run Linter
        if: always()
        run: npm run lint:ci

      - uses: dorny/test-reporter@1a288b62f8b75c0f433cbfdbc2e4800fbae50bd7
        if: ${{ (success() || failure()) && github.event.pull_request.head.repo.full_name == github.repository }}
        with:
          name: VS Code Test Results (${{matrix.os}}, ${{matrix.vscode-version}}, ${{matrix.vscode-platform}})
          path: 'test-results/*.json'
          use-actions-summary: 'true'
          reporter: mocha-json
        
      - uses: actions/upload-artifact@v4
        if: ${{ (success() || failure()) && github.event.pull_request.head.repo.full_name == github.repository }}
        with:
          name: VS Code Test Results (${{matrix.os}}, ${{matrix.vscode-version}}, ${{matrix.vscode-platform}})
          path: 'test-results/*.json'